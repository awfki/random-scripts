#!/usr/bin/env python
# calimport.py
# Given a directory (and sub-dirs) it ...
# * unpacks all the archives
# * Goes through each new sub-dir and eliminates unwanted ebook formats
# 	"Eliminates unwanted formats" means keep the most preferred format and
# 	delete the rest.  Formats are preferred in the order
# 	epub azw3 azw mobi (fb2 lit prc) pdf | cbz, cbr
# * if the sub-dir has an opf file it imports the remainder to calibre.

import os
import logging
import send2trash
# example: send2trash.send2trash('bacon.txt')

logging.disable(logging.CRITICAL)
logging.basicConfig(level=logging.DEBUG, format='%(levelname)s: %(asctime)s %(message)s', datefmt="%Y-%m-%d %H:%M:%S")
logging.debug('=======================')
logging.debug('=== start of program ===')

startdir = os.getcwd()
logging.debug('startdir = ' + startdir)

in_dir = os.path.expanduser("~/Dropbox/_calibre-auto-add")
logging.debug('in_dir = ' + in_dir)
os.chdir(in_dir)    # this should probably try in case there's an error

# Walk the entire folder tree and uncompress the zip|rar files in each folder.
for foldername, subfolders, filenames in os.walk(in_dir):
	logging.debug('walking... ' + foldername)
	# Add the current folder to the ZIP file.
	for fn in (filenames):
		logging.debug('filename... ' + fn)
		if fn.endswith('.zip'):
			logging.debug('opening... ' + fn)
			bashCommand = "open \'" + os.path.join(foldername, fn) + "\'"
			os.system(bashCommand)
			send2trash.send2trash(fn)
		elif fn.endswith('.rar'):
			logging.debug('opening... ' + fn)
			bashCommand = "open \'" + os.path.join(foldername, fn) + "\'"
			os.system(bashCommand)
			send2trash.send2trash(fn)

# archives are unpacked, now need to import and then delete any epubs
#		what about dupes?
#bashCommand = "caldb add --recurse --tags=#CleanMe-YYYY-MM --one-book-per-directory --add=*.epub ~/Dropbox/_calibre-auto-add"


quit()
#=======================
# the rest of this is the calupdate script that I used as a starter...

bashCommand = "wget -O calibre-latest.dmg -N http://status.calibre-ebook.com/dist/osx32"
logging.debug('bashCommand = ' + bashCommand)
os.system(bashCommand)

bashCommand = "open " + in_dir + "/calibre-latest.dmg"
logging.debug('bashCommand = ' + bashCommand)
os.system(bashCommand)

os.chdir(startdir)

logging.debug('=== end of program ===')
logging.debug('=======================')
